// <auto-generated />
using Anki.Domain.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Anki.Domain.Migrations
{
    [DbContext(typeof(AnkiDbContext))]
    partial class AnkiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Anki.Domain.Entities.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Back")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("DeckId")
                        .HasColumnType("int");

                    b.Property<int>("DeckId1")
                        .HasColumnType("int");

                    b.Property<string>("Front")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("DeckId");

                    b.HasIndex("DeckId1");

                    b.ToTable("Card", (string)null);
                });

            modelBuilder.Entity("Anki.Domain.Entities.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Title" }, "IDX_Title_Deck")
                        .IsUnique();

                    b.ToTable("Deck", (string)null);
                });

            modelBuilder.Entity("Anki.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Text" }, "IX_Tag_Text")
                        .IsUnique();

                    b.ToTable("Tag", (string)null);
                });

            modelBuilder.Entity("CardTag", b =>
                {
                    b.Property<int>("Card_Id")
                        .HasColumnType("int");

                    b.Property<int>("Tag_Id")
                        .HasColumnType("int");

                    b.HasKey("Card_Id", "Tag_Id");

                    b.HasIndex("Tag_Id");

                    b.ToTable("CardTag");
                });

            modelBuilder.Entity("Anki.Domain.Entities.Card", b =>
                {
                    b.HasOne("Anki.Domain.Entities.Deck", null)
                        .WithMany("Cards")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Deck_Card");

                    b.HasOne("Anki.Domain.Entities.Deck", "Deck")
                        .WithMany()
                        .HasForeignKey("DeckId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("CardTag", b =>
                {
                    b.HasOne("Anki.Domain.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("Card_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CARDTAG_CARDID");

                    b.HasOne("Anki.Domain.Entities.Card", null)
                        .WithMany()
                        .HasForeignKey("Tag_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CARDTAG_TAGID");
                });

            modelBuilder.Entity("Anki.Domain.Entities.Deck", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
